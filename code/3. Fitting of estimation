n0<-200 #the number of cycle
k<-260
Insert<-7
Start<-8
int<-c(seq(0,Start,by=1/Insert)[-1],(Start+1):(k))
int<-1:k
K<-length(int)

6. Function 6:weibull fit and 95%ci
beta_fit_wei<-function(beta_bcmc_stan,M,int,k,n0){
  beta_bcmc_stan<-beta_bcmc_stan_0.05
library(foreach)
library(iterators)
library(parallel)
library(doParallel)
bcmc_wei<-list()
n.cores <- detectCores()
cl <- makeCluster(n.cores-1) 
registerDoParallel(cl)
for(m in 1:M){
y_95<-matrix(NA,nrow=n0,ncol=K)
mean<-beta_bcmc_stan[,m]
lwr<-beta_bcmc_stan[,m+M]
z<-1.96
sd0<-(mean-lwr)/z*((n0)^(1/2))
base_1<-mean(exp(mean)-exp(lwr))
K<-length(int)
fit_num<-which((int ==round(int))==TRUE)
for(col in 1:K){
y_95[,col]<-exp(rnorm(n0,mean=as.numeric(mean[col]),sd=as.numeric(sd0[col])))
}
fitting<-matrix(NA,nrow=n0,ncol=k)
fitting<-foreach(nn = 1:n0,
               .combine = rbind,
               .packages = c("MASS"),
               .errorhandling = "pass") %dopar% {
y<-y_95[nn,fit_num]
base<-1
if(M==4){
  if ((m==1)|(m==3)|(m==4)) {y[which(y>base)]<-base}
  if (m==2) {y[which(y<base)]<-base}
   }
if(M==2){y[which(y>base)]<-base}
y<-y-base
inter<-1
redu<-sum(y)*inter/1
y<-y/redu
sum(y*inter)#=1
length(y)
X<-sample(1:(k),10000,prob=y,replace = TRUE)
fit<-fitdistr(X, "Weibull")
shape<-fit[["estimate"]][1]
scale<-fit[["estimate"]][2]
t<-c(1:k)
weibull<-dweibull(t, shape = shape, scale = scale)
weibull<-weibull*(redu)+base
return(weibull)
               }
mean<-apply(fitting,2,function(x){mean(x)})
y_lwr<-apply(fitting,2,function(x){quantile(x, 0.025,na.rm=TRUE)})-base_1/2
y_upr<-apply(fitting,2,function(x){quantile(x, 0.975,na.rm=TRUE)})+base_1/2
plot(mean,type="l",ylim=c(0,2))
lines(y_lwr)
lines(y_upr)
bcmc_wei[[m]]<-cbind(mean,y_lwr,y_upr)
colnames(bcmc_wei[[m]])<-c("bcmc","bcmc_lwr","bcmc_upr")
}
return(bcmc_wei)
stopCluster(cl)
}
bcmc_wei<-beta_fit_wei(beta_bcmc_stan,M,int,k,n0)
～～～～～～～～～～～～～

7. Function 7:linear fit and 95%ci
beta_fit_lin<-function(beta_bcmc_stan,M,int,k,n0){
library(foreach)
library(iterators)
library(parallel)
library(doParallel)
dat_lin<-list()
n.cores <- detectCores()
cl <- makeCluster(n.cores-1) 
registerDoParallel(cl)
for(m in 1:M){
y_95<-matrix(NA,nrow=n0,ncol=K)
mean<-beta_bcmc_stan[,m]
lwr<-beta_bcmc_stan[,m+M]
z<-1.96
sd0<-(mean-lwr)/z*((n0)^(1/2))
base_1<-mean(exp(mean)-exp(lwr))
K<-length(int)
fit_num<-which((int ==round(int))==TRUE)
for(col in 1:K){
y_95[,col]<-exp(rnorm(n0,mean=as.numeric(mean[col]),sd=as.numeric(sd0[col])))
}
fitting<-matrix(NA,nrow=n0,ncol=k)
fitting<-foreach(nn = 1:n0,
               .combine = rbind,
               .packages = c("MASS"),
               .errorhandling = "pass") %dopar% {
y<-y_95[nn,fit_num]
dat_fit<-as.data.frame(cbind(y,1:k))
colnames(dat_fit)<-c("y","x")
fit<-lm(y~int,data=dat_fit)
fitted<-fitted(fit)
return(fitted)
}
mean<-apply(fitting,2,function(x){mean(x)})
y_lwr<-apply(fitting,2,function(x){quantile(x, 0.025,na.rm=TRUE)})-base_1/2
y_upr<-apply(fitting,2,function(x){quantile(x, 0.975,na.rm=TRUE)})+base_1/2
plot(mean,type="l",ylim=c(0,2))
lines(y_lwr)
lines(y_upr)
bcmc_lin[[m]][,1]<-mean
bcmc_lin[[m]][,2]<-y_upr
bcmc_lin[[m]][,3]<-y_lwr
colnames(bcmc_wei[[m]])<-c("bcmc","bcmc_lwr","bcmc_upr")
}
return(bcmc_lin)
stopCluster(cl)
}
bcmc_lin<-beta_fit_lin(beta_bcmc_stan,M,int,k,n0)
～～～～～～～～～


8. Select the best fitting model
bcmc_fit<-list()
for(m in 1:M){
dat_lin<-bcmc_lin[[m]]
dat_wei<-bcmc_wei[[m]]
origin<-beta_bcmc_stan[fit_num,m]
mse_1<-(dat_lin$bcmc-exp(origin))^2
mse_2<-(dat_wei$bcmc-exp(origin))^2
print(mean(mse_1[,1]))
print(mean(mse_2[,1]))
bcmc_fit[[m]]<-ifelse(mse_1<mse_2,dat_lin,dat_wei)
}

data_all<-list()
for(m in 1:M){
y_cox<-cbind(rep(as.numeric(HR_cox[m,1]),k),rep(as.numeric(HR_cox[m,2]),k),rep(as.numeric(HR_cox[m,3]),k))
colnames(y_cox)<-c("cox","cox_lwr","cox_upr")
fit_num<-which((int ==round(int))==TRUE)
y_tv<-cbind(HR_TV[,m],HR_TV[,m+M],HR_TV[,m+M*2])
[fit_num,]
colnames(y_tv)<-c("tv","tv_lwr","tv_upr")
y_true<-exp(beta[m,])
x<- data.frame(x = t)
data_all[[m]]<-cbind(x,bcmc_fit[[m]],y_cox,y_tv,y_true)
}
write.csv(dat_weibull,"~/Desktop/data_all.csv")
